# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;


    upstream php-handler {
      server 127.0.0.1:9000;
      # Depending on your used PHP version
      #server unix:/var/run/php5-fpm.sock;
      #server unix:/var/run/php7-fpm.sock;
  }

  server {
      listen 80;
      server_name _;

      # For SSL certificate verifications, this needs to be served via HTTP
      location /.well-known/(acme-challenge|pki-validation)/ {
          root /usr/share/nginx/html/owncloud; # Specify here where the challenge file is placed
      }

      # enforce https
      location / {
          return 301 https://$server_name$request_uri;
      }
  }

  server {
      listen 443 ssl;
      server_name _;


      # Listen on port 443 using SSL and make it the default server
      # listen 443 default_server ssl;
      # Specify the path of your .crt and .key files
      ssl_certificate /home/ec2-user/certificate/compute-1.amazonaws.com.crt;
      ssl_certificate_key /home/ec2-user/certificate/compute-1.amazonaws.com.key;
      # Enable session caching, increase session timeout
      ssl_session_cache shared:SSL:20m;
      ssl_session_timeout 60m;
      # Disable SSL in favor of TLS (safer)
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;


      # ssl_certificate /etc/ssl/nginx/cloud.example.com.crt;
      # ssl_certificate_key /etc/ssl/nginx/cloud.example.com.key;

      # Example SSL/TLS configuration. Please read into the manual of NGINX before applying these.
      # ssl_session_timeout 5m;
      # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      # ssl_ciphers "-ALL:EECDH+AES256:EDH+AES256:AES256-SHA:EECDH+AES:EDH+AES:!ADH:!NULL:!aNULL:!eNULL:!EXPORT:!LOW:!MD5:!3DES:!PSK:!SRP:!DSS:!AESGCM:!RC4";
      # ssl_dhparam /etc/nginx/dh4096.pem;
      # ssl_prefer_server_ciphers on;
      # keepalive_timeout    70;
      # ssl_stapling on;
      # ssl_stapling_verify on;

      # Add headers to serve security related headers
      # The always parameter ensures that the header is set for all responses, including internally generated error responses.
      # Before enabling Strict-Transport-Security headers please read into this topic first.
      # https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/

      #add_header Strict-Transport-Security "max-age=15552000; includeSubDomains; preload" always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header X-Robots-Tag none always;
      add_header X-Download-Options noopen always;
      add_header X-Permitted-Cross-Domain-Policies none always;

      # Path to the root of your installation
      root /usr/share/nginx/html;

      location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
      }

      # The following 2 rules are only needed for the user_webfinger app.
      # Uncomment it if you're planning to use this app.

      #rewrite ^/.well-known/host-meta /owncloud/public.php?service=host-meta last;
      #rewrite ^/.well-known/host-meta.json /owncloud/public.php?service=host-meta-json last;

      location = /.well-known/carddav {
          return 301 $scheme://$host/owncloud/remote.php/dav;
      }
      location = /.well-known/caldav {
          return 301 $scheme://$host/owncloud/remote.php/dav;
      }

      location ^~ /owncloud {

          # set max upload size
          client_max_body_size 512M;
          fastcgi_buffers 8 4K;                     # Please see note 1
          fastcgi_ignore_headers X-Accel-Buffering; # Please see note 2


          # Disable gzip to avoid the removal of the ETag header
          # Enabling gzip would also make your server vulnerable to BREACH
          # if no additional measures are done. See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=773332
          gzip off;

          # Uncomment if your server is build with the ngx_pagespeed module
          # This module is currently not supported.
          #pagespeed off;

          error_page 403 /owncloud/core/templates/403.php;
          error_page 404 /owncloud/core/templates/404.php;

          location /owncloud {
              rewrite ^ /owncloud/index.php$uri;
          }

          location ~ ^/owncloud/(?:build|tests|config|lib|3rdparty|templates|data)/ {
              return 404;
          }
          location ~ ^/owncloud/(?:\.|autotest|occ|issue|indie|db_|console) {
              return 404;
          }

          location ~ ^/owncloud/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|ocm-provider/.+|core/templates/40[34])\.php(?:$|/) {
              fastcgi_split_path_info ^(.+\.php)(/.*)$;
              include fastcgi_params;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_param SCRIPT_NAME $fastcgi_script_name; # necessary for owncloud to detect the context root https://github.com/owncloud/core/blob/v10.0.0/lib/private/AppFramework/Http/Request.php#L603
              fastcgi_param PATH_INFO $fastcgi_path_info;
              fastcgi_param HTTPS on;
              fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice
              # EXPERIMENTAL: active the following if you need to get rid of the 'index.php' in the URLs
              #fastcgi_param front_controller_active true;
              fastcgi_read_timeout 180; # increase default timeout e.g. for long running carddav/ caldav syncs with 1000+ entries
              fastcgi_pass php-handler;
              fastcgi_intercept_errors on;
              fastcgi_request_buffering off; #Available since NGINX 1.7.11
          }

          location ~ ^/owncloud/(?:updater|ocs-provider|ocm-provider)(?:$|/) {
              try_files $uri $uri/ =404;
              index index.php;
          }

          # Adding the cache control header for js and css files
          # Make sure it is BELOW the PHP block
          location ~ /owncloud/.*\.(?:css|js) {
              try_files $uri /owncloud/index.php$uri$is_args$args;
              add_header Cache-Control "max-age=15778463" always;

              # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)
              # The always parameter ensures that the header is set for all responses, including internally generated error responses.
              # Before enabling Strict-Transport-Security headers please read into this topic first.
              # https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/

              #add_header Strict-Transport-Security "max-age=15552000; includeSubDomains; preload" always;
              add_header X-Content-Type-Options nosniff always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Robots-Tag none always;
              add_header X-Download-Options noopen always;
              add_header X-Permitted-Cross-Domain-Policies none always;
              # Optional: Don't log access to assets
              access_log off;
          }

          location ~ /owncloud/.*\.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg|map|json) {
              try_files $uri /owncloud/index.php$uri$is_args$args;
              add_header Cache-Control "public, max-age=7200" always;
              # Optional: Don't log access to other assets
              access_log off;
          }
      }
  }


# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2 default_server;
#        listen       [::]:443 ssl http2 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers HIGH:!aNULL:!MD5;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#        }
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }

}

